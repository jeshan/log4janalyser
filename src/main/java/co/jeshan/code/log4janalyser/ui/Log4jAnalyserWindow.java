/*
 * The Simplified BSD Licence follows:
 * Copyright (c) 2014, Jeshan G. BABOOA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 */

package co.jeshan.code.log4janalyser.ui;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.*;
import org.tepi.filtertable.FilterTable;

public class Log4jAnalyserWindow extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,10","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":true,"snappingDistance":10} */

    @AutoGenerated
    private VerticalLayout mainLayout;
    @AutoGenerated
    private GridLayout tableLayout;
    @AutoGenerated
    private FilterTable logTable;
    @AutoGenerated
    private AbsoluteLayout inputLayout;
    @AutoGenerated
    private Button closeButton;
    @AutoGenerated
    private Button clearButton;
    @AutoGenerated
    private Button submitButton;
    @AutoGenerated
    private CheckBox isTailingBox;
    @AutoGenerated
    private TextField inputPathField;
    @AutoGenerated
    private TextField log4jPatternField;

    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     * <p/>
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public Log4jAnalyserWindow() {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        // TODO add user code here
    }

    @AutoGenerated
    private VerticalLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(true);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("100%");
        mainLayout.setMargin(false);

        // top-level component properties
        setWidth("100.0%");
        setHeight("100.0%");

        // inputLayout
        inputLayout = buildInputLayout();
        mainLayout.addComponent(inputLayout);

        // tableLayout
        tableLayout = buildTableLayout();
        mainLayout.addComponent(tableLayout);
        mainLayout.setExpandRatio(tableLayout, 1.0f);

        return mainLayout;
    }

    @AutoGenerated
    private AbsoluteLayout buildInputLayout() {
        // common part: create layout
        inputLayout = new AbsoluteLayout();
        inputLayout.setStyleName("inputLayout");
        inputLayout.setImmediate(true);
        inputLayout.setWidth("580px");
        inputLayout.setHeight("210px");

        // log4jPatternField
        log4jPatternField = new TextField();
        log4jPatternField.setStyleName("log4jPatternField");
        log4jPatternField.setCaption("Log4j Pattern:");
        log4jPatternField.setImmediate(true);
        log4jPatternField.setWidth("300px");
        log4jPatternField.setHeight("-1px");
        log4jPatternField.setTabIndex(1);
        log4jPatternField.setInputPrompt("Log4j Pattern");
        inputLayout.addComponent(log4jPatternField, "top:140.0px;left:20.0px;");

        // inputPathField
        inputPathField = new TextField();
        inputPathField.setStyleName("inputPathField");
        inputPathField.setCaption("Input path:");
        inputPathField.setImmediate(true);
        inputPathField.setWidth("400px");
        inputPathField.setHeight("-1px");
        inputPathField.setRequired(true);
        inputPathField.setInputPrompt("/path/to/file");
        inputLayout.addComponent(inputPathField, "top:66.0px;left:20.0px;");

        // isTailingBox
        isTailingBox = new CheckBox();
        isTailingBox.setStyleName("isTailingBox");
        isTailingBox.setCaption("tail?");
        isTailingBox.setImmediate(true);
        isTailingBox.setWidth("-1px");
        isTailingBox.setHeight("-1px");
        isTailingBox.setTabIndex(2);
        inputLayout.addComponent(isTailingBox, "top:140.0px;left:350.0px;");

        // submitButton
        submitButton = new Button();
        submitButton.setStyleName("submitButton");
        submitButton.setCaption("Submit");
        submitButton.setImmediate(true);
        submitButton.setWidth("-1px");
        submitButton.setHeight("-1px");
        submitButton.setTabIndex(3);
        inputLayout.addComponent(submitButton, "top:60.0px;left:440.0px;");

        // clearButton
        clearButton = new Button();
        clearButton.setStyleName("clearButton");
        clearButton.setCaption("Clear");
        clearButton.setImmediate(true);
        clearButton.setWidth("100.0%");
        clearButton.setHeight("-1px");
        inputLayout.addComponent(clearButton,
                "top:100.0px;right:66.0px;left:440.0px;");

        // closeButton
        closeButton = new Button();
        closeButton.setStyleName("closeButton");
        closeButton.setCaption("Close File");
        closeButton.setImmediate(true);
        closeButton.setWidth("-1px");
        closeButton.setHeight("-1px");
        inputLayout.addComponent(closeButton, "top:140.0px;left:440.0px;");

        return inputLayout;
    }

    @AutoGenerated
    private GridLayout buildTableLayout() {
        // common part: create layout
        tableLayout = new GridLayout();
        tableLayout.setStyleName("tableLayout");
        tableLayout.setImmediate(true);
        tableLayout.setWidth("100.0%");
        tableLayout.setHeight("100.0%");
        tableLayout.setMargin(false);

        // logTable
        logTable = new FilterTable();
        logTable.setStyleName("logTable");
        logTable.setImmediate(true);
        logTable.setWidth("100.0%");
        logTable.setHeight("80.0%");
        tableLayout.addComponent(logTable, 0, 0);

        return tableLayout;
    }

}
